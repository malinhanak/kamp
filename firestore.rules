rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null
    }
    
    function getGameData(gameId) {
      return get(/databases/$(database)/documents/games/$(gameId))
    }
    
    function getTeamsData(teamId) {
      return get(/databases/$(database)/documents/teams/$(teamId))
    }

    function isGameOwner() {
      return isAuthenticated() && request.auth.uid == resource.data.ownerId
    }

    function isGamePlayer() {
      return isAuthenticated() && request.auth.uid in resource.data.players
    }

    function isRegisteredToGame(gameId) {
      return isAuthenticated() && request.auth.uid in getGameData(gameId).data.players 
      || isAuthenticated() && getGameData(gameId).data.ownerId == request.auth.uid;
    }

    match /{document=**} {
      allow read: if false;
      allow write: if false;
    }
    
    match /users {
      allow read: if true;
      allow create: if isAuthenticated();
  	}
    
    match /users/{uid} {
  		allow read, write: if isAuthenticated() && request.auth.uid == uid;
  	}

    match /games {
      allow read: if isAuthenticated();
      allow create: if request.auth != null;
  	}

    match /games/{gameId} {
        allow read: if isGamePlayer() || isGameOwner();
        allow update, delete: if request.auth != null && isGameOwner();
  	}
    
    match /gameInfo/{gameId} {
        allow read: if isRegisteredToGame(gameId);
  	}

    match /team_points/{teamId} {
      allow update: if isAuthenticated() && getTeamsData(teamId).data.team_leader == request.auth.uid;
  	}
    
    match /teams/{teamId} {
      allow read: if isRegisteredToGame(resource.data.gameId);
  	}
  }
}